/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as guestImport } from './routes/__guest'
import { Route as authImport } from './routes/__auth'
import { Route as authIndexImport } from './routes/__auth.index'
import { Route as guestRegisterImport } from './routes/__guest.register'
import { Route as guestLoginImport } from './routes/__guest.login'

// Create/Update Routes

const guestRoute = guestImport.update({
  id: '/__guest',
  getParentRoute: () => rootRoute,
} as any)

const authRoute = authImport.update({
  id: '/__auth',
  getParentRoute: () => rootRoute,
} as any)

const authIndexRoute = authIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authRoute,
} as any)

const guestRegisterRoute = guestRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => guestRoute,
} as any)

const guestLoginRoute = guestLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => guestRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__auth': {
      id: '/__auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/__guest': {
      id: '/__guest'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof guestImport
      parentRoute: typeof rootRoute
    }
    '/__guest/login': {
      id: '/__guest/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof guestLoginImport
      parentRoute: typeof guestImport
    }
    '/__guest/register': {
      id: '/__guest/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof guestRegisterImport
      parentRoute: typeof guestImport
    }
    '/__auth/': {
      id: '/__auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authIndexImport
      parentRoute: typeof authImport
    }
  }
}

// Create and export the route tree

interface authRouteChildren {
  authIndexRoute: typeof authIndexRoute
}

const authRouteChildren: authRouteChildren = {
  authIndexRoute: authIndexRoute,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface guestRouteChildren {
  guestLoginRoute: typeof guestLoginRoute
  guestRegisterRoute: typeof guestRegisterRoute
}

const guestRouteChildren: guestRouteChildren = {
  guestLoginRoute: guestLoginRoute,
  guestRegisterRoute: guestRegisterRoute,
}

const guestRouteWithChildren = guestRoute._addFileChildren(guestRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof guestRouteWithChildren
  '/login': typeof guestLoginRoute
  '/register': typeof guestRegisterRoute
  '/': typeof authIndexRoute
}

export interface FileRoutesByTo {
  '': typeof guestRouteWithChildren
  '/login': typeof guestLoginRoute
  '/register': typeof guestRegisterRoute
  '/': typeof authIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/__auth': typeof authRouteWithChildren
  '/__guest': typeof guestRouteWithChildren
  '/__guest/login': typeof guestLoginRoute
  '/__guest/register': typeof guestRegisterRoute
  '/__auth/': typeof authIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/register' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/login' | '/register' | '/'
  id:
    | '__root__'
    | '/__auth'
    | '/__guest'
    | '/__guest/login'
    | '/__guest/register'
    | '/__auth/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authRoute: typeof authRouteWithChildren
  guestRoute: typeof guestRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  authRoute: authRouteWithChildren,
  guestRoute: guestRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/__auth",
        "/__guest"
      ]
    },
    "/__auth": {
      "filePath": "__auth.tsx",
      "children": [
        "/__auth/"
      ]
    },
    "/__guest": {
      "filePath": "__guest.tsx",
      "children": [
        "/__guest/login",
        "/__guest/register"
      ]
    },
    "/__guest/login": {
      "filePath": "__guest.login.tsx",
      "parent": "/__guest"
    },
    "/__guest/register": {
      "filePath": "__guest.register.tsx",
      "parent": "/__guest"
    },
    "/__auth/": {
      "filePath": "__auth.index.tsx",
      "parent": "/__auth"
    }
  }
}
ROUTE_MANIFEST_END */
