/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as _guestRouteImport } from './routes/__guest'
import { Route as _authRouteImport } from './routes/__auth'
import { Route as _authIndexRouteImport } from './routes/__auth.index'
import { Route as _guestRegisterRouteImport } from './routes/__guest.register'
import { Route as _guestLoginRouteImport } from './routes/__guest.login'
import { Route as _authSettingsRouteImport } from './routes/__auth.settings'
import { Route as _authAccountsRouteImport } from './routes/__auth.accounts'

const _guestRoute = _guestRouteImport.update({
  id: '/__guest',
  getParentRoute: () => rootRouteImport,
} as any)
const _authRoute = _authRouteImport.update({
  id: '/__auth',
  getParentRoute: () => rootRouteImport,
} as any)
const _authIndexRoute = _authIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => _authRoute,
} as any)
const _guestRegisterRoute = _guestRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => _guestRoute,
} as any)
const _guestLoginRoute = _guestLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => _guestRoute,
} as any)
const _authSettingsRoute = _authSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => _authRoute,
} as any)
const _authAccountsRoute = _authAccountsRouteImport.update({
  id: '/accounts',
  path: '/accounts',
  getParentRoute: () => _authRoute,
} as any)

export interface FileRoutesByFullPath {
  '/accounts': typeof _authAccountsRoute
  '/settings': typeof _authSettingsRoute
  '/login': typeof _guestLoginRoute
  '/register': typeof _guestRegisterRoute
  '/': typeof _authIndexRoute
}
export interface FileRoutesByTo {
  '/accounts': typeof _authAccountsRoute
  '/settings': typeof _authSettingsRoute
  '/login': typeof _guestLoginRoute
  '/register': typeof _guestRegisterRoute
  '/': typeof _authIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/__auth': typeof _authRouteWithChildren
  '/__guest': typeof _guestRouteWithChildren
  '/__auth/accounts': typeof _authAccountsRoute
  '/__auth/settings': typeof _authSettingsRoute
  '/__guest/login': typeof _guestLoginRoute
  '/__guest/register': typeof _guestRegisterRoute
  '/__auth/': typeof _authIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/accounts' | '/settings' | '/login' | '/register' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/accounts' | '/settings' | '/login' | '/register' | '/'
  id:
    | '__root__'
    | '/__auth'
    | '/__guest'
    | '/__auth/accounts'
    | '/__auth/settings'
    | '/__guest/login'
    | '/__guest/register'
    | '/__auth/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  _authRoute: typeof _authRouteWithChildren
  _guestRoute: typeof _guestRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__guest': {
      id: '/__guest'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _guestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__auth': {
      id: '/__auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _authRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__auth/': {
      id: '/__auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof _authIndexRouteImport
      parentRoute: typeof _authRoute
    }
    '/__guest/register': {
      id: '/__guest/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof _guestRegisterRouteImport
      parentRoute: typeof _guestRoute
    }
    '/__guest/login': {
      id: '/__guest/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof _guestLoginRouteImport
      parentRoute: typeof _guestRoute
    }
    '/__auth/settings': {
      id: '/__auth/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof _authSettingsRouteImport
      parentRoute: typeof _authRoute
    }
    '/__auth/accounts': {
      id: '/__auth/accounts'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof _authAccountsRouteImport
      parentRoute: typeof _authRoute
    }
  }
}

interface _authRouteChildren {
  _authAccountsRoute: typeof _authAccountsRoute
  _authSettingsRoute: typeof _authSettingsRoute
  _authIndexRoute: typeof _authIndexRoute
}

const _authRouteChildren: _authRouteChildren = {
  _authAccountsRoute: _authAccountsRoute,
  _authSettingsRoute: _authSettingsRoute,
  _authIndexRoute: _authIndexRoute,
}

const _authRouteWithChildren = _authRoute._addFileChildren(_authRouteChildren)

interface _guestRouteChildren {
  _guestLoginRoute: typeof _guestLoginRoute
  _guestRegisterRoute: typeof _guestRegisterRoute
}

const _guestRouteChildren: _guestRouteChildren = {
  _guestLoginRoute: _guestLoginRoute,
  _guestRegisterRoute: _guestRegisterRoute,
}

const _guestRouteWithChildren =
  _guestRoute._addFileChildren(_guestRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  _authRoute: _authRouteWithChildren,
  _guestRoute: _guestRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
