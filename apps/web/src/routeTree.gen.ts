/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as authImport } from './routes/__auth'
import { Route as authIndexImport } from './routes/__auth.index'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const authRoute = authImport.update({
  id: '/__auth',
  getParentRoute: () => rootRoute,
} as any)

const authIndexRoute = authIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__auth': {
      id: '/__auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/__auth/': {
      id: '/__auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authIndexImport
      parentRoute: typeof authImport
    }
  }
}

// Create and export the route tree

interface authRouteChildren {
  authIndexRoute: typeof authIndexRoute
}

const authRouteChildren: authRouteChildren = {
  authIndexRoute: authIndexRoute,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof authRouteWithChildren
  '/login': typeof LoginRoute
  '/': typeof authIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/': typeof authIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/__auth': typeof authRouteWithChildren
  '/login': typeof LoginRoute
  '/__auth/': typeof authIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/'
  id: '__root__' | '/__auth' | '/login' | '/__auth/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authRoute: typeof authRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  authRoute: authRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/__auth",
        "/login"
      ]
    },
    "/__auth": {
      "filePath": "__auth.tsx",
      "children": [
        "/__auth/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/__auth/": {
      "filePath": "__auth.index.tsx",
      "parent": "/__auth"
    }
  }
}
ROUTE_MANIFEST_END */
